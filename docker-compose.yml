services:
  # Serviço 1: Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME} 
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: techchallenge_prod
    ports:
      - "5432:5432" 
    volumes:
      - postgres_data:/var/lib/postgresql/data 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SPRING_DATASOURCE_USERNAME} -d techchallenge_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço 2: Backend Spring Boot
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_app
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/techchallenge_prod
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_JPA_SHOW_SQL: ${SPRING_JPA_SHOW_SQL}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy 

  # Serviço 3: Frontend Next.js
  frontend:
    build:
      context: ./frontend 
      dockerfile: Dockerfile
    container_name: frontend_app
    ports:
      - "3000:3000" 
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8080
    depends_on:
      - backend 
volumes:
  postgres_data: {}